import type { GetDomainsParams, GetInvitationsParams, GetMembershipRequestParams, GetMembershipsParams, GetPendingInvitationsParams, OrganizationDomainResource, OrganizationInvitationResource, OrganizationMembershipRequestResource, OrganizationMembershipResource, OrganizationResource } from '@clerk/types';
import type { GetMembersParams } from '@clerk/types';
import type { PaginatedResources, PaginatedResourcesWithDefault } from './types';
type UseOrganizationParams = {
    /**
     * @deprecated Use `invitations` instead
     */
    invitationList?: GetPendingInvitationsParams;
    /**
     * @deprecated Use `memberships` instead
     */
    membershipList?: GetMembershipsParams;
    domains?: true | (GetDomainsParams & {
        infinite?: boolean;
        keepPreviousData?: boolean;
    });
    membershipRequests?: true | (GetMembershipRequestParams & {
        infinite?: boolean;
        keepPreviousData?: boolean;
    });
    memberships?: true | (GetMembersParams & {
        infinite?: boolean;
        keepPreviousData?: boolean;
    });
    invitations?: true | (GetInvitationsParams & {
        infinite?: boolean;
        keepPreviousData?: boolean;
    });
};
type UseOrganizationReturn = {
    isLoaded: false;
    organization: undefined;
    /**
     * @deprecated Use `invitations` instead
     */
    invitationList: undefined;
    /**
     * @deprecated Use `memberships` instead
     */
    membershipList: undefined;
    membership: undefined;
    domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;
    membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;
    memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;
    invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;
} | {
    isLoaded: true;
    organization: OrganizationResource;
    /**
     * @deprecated Use `invitations` instead
     */
    invitationList: undefined;
    /**
     * @deprecated Use `memberships` instead
     */
    membershipList: undefined;
    membership: undefined;
    domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;
    membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;
    memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;
    invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;
} | {
    isLoaded: boolean;
    organization: OrganizationResource | null;
    /**
     * @deprecated Use `invitations` instead
     */
    invitationList: OrganizationInvitationResource[] | null | undefined;
    /**
     * @deprecated Use `memberships` instead
     */
    membershipList: OrganizationMembershipResource[] | null | undefined;
    membership: OrganizationMembershipResource | null | undefined;
    domains: PaginatedResources<OrganizationDomainResource> | null;
    membershipRequests: PaginatedResources<OrganizationMembershipRequestResource> | null;
    memberships: PaginatedResources<OrganizationMembershipResource> | null;
    invitations: PaginatedResources<OrganizationInvitationResource> | null;
};
type UseOrganization = (params?: UseOrganizationParams) => UseOrganizationReturn;
export declare const useOrganization: UseOrganization;
export {};
//# sourceMappingURL=useOrganization.d.ts.map