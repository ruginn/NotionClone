import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';
interface ClerkAPIResponseOptions {
    data: ClerkAPIErrorJSON[];
    status: number;
}
export interface MetamaskError extends Error {
    code: 4001 | 32602 | 32603;
    message: string;
    data?: unknown;
}
export declare function isKnownError(error: any): boolean;
export declare function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError;
/**
 * Checks if the provided error object is an instance of ClerkRuntimeError.
 *
 * @param {any} err - The error object to check.
 * @returns {boolean} True if the error is a ClerkRuntimeError, false otherwise.
 *
 * @example
 * const error = new ClerkRuntimeError('An error occurred');
 * if (isClerkRuntimeError(error)) {
 *   // Handle ClerkRuntimeError
 *   console.error('ClerkRuntimeError:', error.message);
 * } else {
 *   // Handle other errors
 *   console.error('Other error:', error.message);
 * }
 */
export declare function isClerkRuntimeError(err: any): err is ClerkRuntimeError;
export declare function isMetamaskError(err: any): err is MetamaskError;
export declare function parseErrors(data?: ClerkAPIErrorJSON[]): ClerkAPIError[];
export declare function parseError(error: ClerkAPIErrorJSON): ClerkAPIError;
export declare class ClerkAPIResponseError extends Error {
    clerkError: true;
    status: number;
    message: string;
    errors: ClerkAPIError[];
    constructor(message: string, { data, status }: ClerkAPIResponseOptions);
    toString: () => string;
}
/**
 * Custom error class for representing Clerk runtime errors.
 *
 * @class ClerkRuntimeError
 * @example
 *   throw new ClerkRuntimeError('An error occurred', { code: 'password_invalid' });
 */
export declare class ClerkRuntimeError extends Error {
    clerkRuntimeError: true;
    /**
     * The error message.
     *
     * @type {string}
     * @memberof ClerkRuntimeError
     */
    message: string;
    /**
     * A unique code identifying the error, used for localization
     *
     * @type {string}
     * @memberof ClerkRuntimeError
     */
    code: string;
    constructor(message: string, { code }: {
        code: string;
    });
    /**
     * Returns a string representation of the error.
     *
     * @returns {string} A formatted string with the error name and message.
     * @memberof ClerkRuntimeError
     */
    toString: () => string;
}
/**
 * @deprecated Use `EmailLinkError` instead.
 */
export declare class MagicLinkError extends Error {
    code: string;
    constructor(code: string);
}
export declare class EmailLinkError extends Error {
    code: string;
    constructor(code: string);
}
/**
 * Check if the error is a MagicLinkError.
 * @deprecated Use `isEmailLinkError` instead.
 */
export declare function isMagicLinkError(err: Error): err is MagicLinkError;
export declare function isEmailLinkError(err: Error): err is EmailLinkError;
/**
 * @deprecated Use `EmailLinkErrorCode` instead.
 */
export declare const MagicLinkErrorCode: {
    Expired: string;
    Failed: string;
};
export declare const EmailLinkErrorCode: {
    Expired: string;
    Failed: string;
};
export {};
//# sourceMappingURL=Error.d.ts.map